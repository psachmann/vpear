// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace VPEAR.Server.Data.Migrations
{
    public partial class Init_Debug : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(255)", nullable: false),
                    Name = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "longtext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(255)", nullable: false),
                    UserName = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    PasswordHash = table.Column<string>(type: "longtext", nullable: true),
                    SecurityStamp = table.Column<string>(type: "longtext", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "longtext", nullable: true),
                    PhoneNumber = table.Column<string>(type: "longtext", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Devices",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Address = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Class = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    DisplayName = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: true),
                    Name = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Frequency = table.Column<uint>(type: "int unsigned", nullable: false),
                    RequiredSensors = table.Column<uint>(type: "int unsigned", nullable: false),
                    Status = table.Column<byte>(type: "tinyint unsigned", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Devices", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    RoleId = table.Column<string>(type: "varchar(255)", nullable: false),
                    ClaimType = table.Column<string>(type: "longtext", nullable: true),
                    ClaimValue = table.Column<string>(type: "longtext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    UserId = table.Column<string>(type: "varchar(255)", nullable: false),
                    ClaimType = table.Column<string>(type: "longtext", nullable: true),
                    ClaimValue = table.Column<string>(type: "longtext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "varchar(255)", nullable: false),
                    ProviderKey = table.Column<string>(type: "varchar(255)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "longtext", nullable: true),
                    UserId = table.Column<string>(type: "varchar(255)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(255)", nullable: false),
                    RoleId = table.Column<string>(type: "varchar(255)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(255)", nullable: false),
                    LoginProvider = table.Column<string>(type: "varchar(255)", nullable: false),
                    Name = table.Column<string>(type: "varchar(255)", nullable: false),
                    Value = table.Column<string>(type: "longtext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Filters",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Spot = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    Smooth = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    Noise = table.Column<bool>(type: "tinyint(1)", nullable: false),
                    DeviceForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Filters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Filters_Devices_DeviceForeignKey",
                        column: x => x.DeviceForeignKey,
                        principalTable: "Devices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Firmwares",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Version = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Upgrade = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Source = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    DeviceForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Firmwares", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Firmwares_Devices_DeviceForeignKey",
                        column: x => x.DeviceForeignKey,
                        principalTable: "Devices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Sensors",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Name = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Units = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Columns = table.Column<uint>(type: "int unsigned", nullable: false),
                    Rows = table.Column<uint>(type: "int unsigned", nullable: false),
                    Width = table.Column<uint>(type: "int unsigned", nullable: false),
                    Height = table.Column<uint>(type: "int unsigned", nullable: false),
                    Minimum = table.Column<uint>(type: "int unsigned", nullable: false),
                    Maximum = table.Column<uint>(type: "int unsigned", nullable: false),
                    DeviceForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sensors", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Sensors_Devices_DeviceForeignKey",
                        column: x => x.DeviceForeignKey,
                        principalTable: "Devices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Wifis",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Ssid = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Mode = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Neighbors = table.Column<string>(type: "longtext", nullable: true),
                    DeviceForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Wifis", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Wifis_Devices_DeviceForeignKey",
                        column: x => x.DeviceForeignKey,
                        principalTable: "Devices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Frames",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "char(36)", nullable: false),
                    Index = table.Column<int>(type: "int", nullable: false),
                    Time = table.Column<string>(type: "varchar(1024)", maxLength: 1024, nullable: false),
                    Readings = table.Column<string>(type: "longtext", nullable: true),
                    DeviceForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    FilterForeignKey = table.Column<Guid>(type: "char(36)", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "datetime(6)", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    ModifiedAt = table.Column<DateTimeOffset>(type: "datetime(6)", rowVersion: true, nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Frames", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Frames_Devices_DeviceForeignKey",
                        column: x => x.DeviceForeignKey,
                        principalTable: "Devices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Frames_Filters_FilterForeignKey",
                        column: x => x.FilterForeignKey,
                        principalTable: "Filters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Devices",
                columns: new[] { "Id", "Address", "Class", "DisplayName", "Frequency", "Name", "RequiredSensors", "Status" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000001"), "address_1", "class_1", "", 1u, "name_1", 1u, (byte)0 },
                    { new Guid("00000000-0000-0000-0000-000000000002"), "address_2", "class_2", "", 2u, "name_2", 2u, (byte)1 },
                    { new Guid("00000000-0000-0000-0000-000000000003"), "address_3", "class_3", "", 3u, "name_3", 3u, (byte)2 },
                    { new Guid("00000000-0000-0000-0000-000000000004"), "address_4", "class_4", "", 4u, "name_4", 4u, (byte)3 },
                    { new Guid("00000000-0000-0000-0000-000000000005"), "address_5", "class_5", "", 5u, "name_5", 5u, (byte)0 },
                    { new Guid("00000000-0000-0000-0000-000000000006"), "address_6", "class_6", "", 6u, "name_6", 6u, (byte)1 },
                    { new Guid("00000000-0000-0000-0000-000000000007"), "address_7", "class_7", "", 7u, "name_7", 7u, (byte)2 },
                    { new Guid("00000000-0000-0000-0000-000000000008"), "address_8", "class_8", "", 8u, "name_8", 8u, (byte)3 },
                    { new Guid("00000000-0000-0000-0000-000000000009"), "address_9", "class_9", "", 9u, "name_9", 9u, (byte)0 }
                });

            migrationBuilder.InsertData(
                table: "Filters",
                columns: new[] { "Id", "DeviceForeignKey", "Noise", "Smooth", "Spot" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000001"), new Guid("00000000-0000-0000-0000-000000000001"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000009"), new Guid("00000000-0000-0000-0000-000000000009"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000002"), new Guid("00000000-0000-0000-0000-000000000002"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000008"), new Guid("00000000-0000-0000-0000-000000000008"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000007"), new Guid("00000000-0000-0000-0000-000000000007"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000003"), new Guid("00000000-0000-0000-0000-000000000003"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000006"), new Guid("00000000-0000-0000-0000-000000000006"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000005"), new Guid("00000000-0000-0000-0000-000000000005"), false, false, false },
                    { new Guid("00000000-0000-0000-0000-000000000004"), new Guid("00000000-0000-0000-0000-000000000004"), false, false, false }
                });

            migrationBuilder.InsertData(
                table: "Firmwares",
                columns: new[] { "Id", "DeviceForeignKey", "Source", "Upgrade", "Version" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000009"), new Guid("00000000-0000-0000-0000-000000000009"), "source_9", "upgrade_9", "version_9" },
                    { new Guid("00000000-0000-0000-0000-000000000008"), new Guid("00000000-0000-0000-0000-000000000008"), "source_8", "upgrade_8", "version_8" },
                    { new Guid("00000000-0000-0000-0000-000000000007"), new Guid("00000000-0000-0000-0000-000000000007"), "source_7", "upgrade_7", "version_7" },
                    { new Guid("00000000-0000-0000-0000-000000000006"), new Guid("00000000-0000-0000-0000-000000000006"), "source_6", "upgrade_6", "version_6" },
                    { new Guid("00000000-0000-0000-0000-000000000005"), new Guid("00000000-0000-0000-0000-000000000005"), "source_5", "upgrade_5", "version_5" },
                    { new Guid("00000000-0000-0000-0000-000000000001"), new Guid("00000000-0000-0000-0000-000000000001"), "source_1", "upgrade_1", "version_1" },
                    { new Guid("00000000-0000-0000-0000-000000000003"), new Guid("00000000-0000-0000-0000-000000000003"), "source_3", "upgrade_3", "version_3" },
                    { new Guid("00000000-0000-0000-0000-000000000004"), new Guid("00000000-0000-0000-0000-000000000004"), "source_4", "upgrade_4", "version_4" },
                    { new Guid("00000000-0000-0000-0000-000000000002"), new Guid("00000000-0000-0000-0000-000000000002"), "source_2", "upgrade_2", "version_2" }
                });

            migrationBuilder.InsertData(
                table: "Sensors",
                columns: new[] { "Id", "Columns", "DeviceForeignKey", "Height", "Maximum", "Minimum", "Name", "Rows", "Units", "Width" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000004"), 0u, new Guid("00000000-0000-0000-0000-000000000004"), 0u, 0u, 0u, "name_4", 0u, "units_4", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000001"), 0u, new Guid("00000000-0000-0000-0000-000000000001"), 0u, 0u, 0u, "name_1", 0u, "units_1", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000009"), 0u, new Guid("00000000-0000-0000-0000-000000000009"), 0u, 0u, 0u, "name_9", 0u, "units_9", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000005"), 0u, new Guid("00000000-0000-0000-0000-000000000005"), 0u, 0u, 0u, "name_5", 0u, "units_5", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000003"), 0u, new Guid("00000000-0000-0000-0000-000000000003"), 0u, 0u, 0u, "name_3", 0u, "units_3", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000006"), 0u, new Guid("00000000-0000-0000-0000-000000000006"), 0u, 0u, 0u, "name_6", 0u, "units_6", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000008"), 0u, new Guid("00000000-0000-0000-0000-000000000008"), 0u, 0u, 0u, "name_8", 0u, "units_8", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000002"), 0u, new Guid("00000000-0000-0000-0000-000000000002"), 0u, 0u, 0u, "name_2", 0u, "units_2", 0u },
                    { new Guid("00000000-0000-0000-0000-000000000007"), 0u, new Guid("00000000-0000-0000-0000-000000000007"), 0u, 0u, 0u, "name_7", 0u, "units_7", 0u }
                });

            migrationBuilder.InsertData(
                table: "Wifis",
                columns: new[] { "Id", "DeviceForeignKey", "Mode", "Neighbors", "Ssid" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000008"), new Guid("00000000-0000-0000-0000-000000000008"), "mode_8", "[\"neighbors_8\"]", "ssid_8" },
                    { new Guid("00000000-0000-0000-0000-000000000001"), new Guid("00000000-0000-0000-0000-000000000001"), "mode_1", "[\"neighbors_1\"]", "ssid_1" },
                    { new Guid("00000000-0000-0000-0000-000000000002"), new Guid("00000000-0000-0000-0000-000000000002"), "mode_2", "[\"neighbors_2\"]", "ssid_2" },
                    { new Guid("00000000-0000-0000-0000-000000000006"), new Guid("00000000-0000-0000-0000-000000000006"), "mode_6", "[\"neighbors_6\"]", "ssid_6" },
                    { new Guid("00000000-0000-0000-0000-000000000005"), new Guid("00000000-0000-0000-0000-000000000005"), "mode_5", "[\"neighbors_5\"]", "ssid_5" },
                    { new Guid("00000000-0000-0000-0000-000000000003"), new Guid("00000000-0000-0000-0000-000000000003"), "mode_3", "[\"neighbors_3\"]", "ssid_3" },
                    { new Guid("00000000-0000-0000-0000-000000000004"), new Guid("00000000-0000-0000-0000-000000000004"), "mode_4", "[\"neighbors_4\"]", "ssid_4" },
                    { new Guid("00000000-0000-0000-0000-000000000007"), new Guid("00000000-0000-0000-0000-000000000007"), "mode_7", "[\"neighbors_7\"]", "ssid_7" },
                    { new Guid("00000000-0000-0000-0000-000000000009"), new Guid("00000000-0000-0000-0000-000000000009"), "mode_9", "[\"neighbors_9\"]", "ssid_9" }
                });

            migrationBuilder.InsertData(
                table: "Frames",
                columns: new[] { "Id", "DeviceForeignKey", "FilterForeignKey", "Index", "Readings", "Time" },
                values: new object[,]
                {
                    { new Guid("00000000-0000-0000-0000-000000000001"), new Guid("00000000-0000-0000-0000-000000000001"), new Guid("00000000-0000-0000-0000-000000000001"), 1, "[]", "time_1" },
                    { new Guid("00000000-0000-0000-0000-000000000002"), new Guid("00000000-0000-0000-0000-000000000002"), new Guid("00000000-0000-0000-0000-000000000002"), 2, "[]", "time_2" },
                    { new Guid("00000000-0000-0000-0000-000000000003"), new Guid("00000000-0000-0000-0000-000000000003"), new Guid("00000000-0000-0000-0000-000000000003"), 3, "[]", "time_3" },
                    { new Guid("00000000-0000-0000-0000-000000000004"), new Guid("00000000-0000-0000-0000-000000000004"), new Guid("00000000-0000-0000-0000-000000000004"), 4, "[]", "time_4" },
                    { new Guid("00000000-0000-0000-0000-000000000005"), new Guid("00000000-0000-0000-0000-000000000005"), new Guid("00000000-0000-0000-0000-000000000005"), 5, "[]", "time_5" },
                    { new Guid("00000000-0000-0000-0000-000000000006"), new Guid("00000000-0000-0000-0000-000000000006"), new Guid("00000000-0000-0000-0000-000000000006"), 6, "[]", "time_6" },
                    { new Guid("00000000-0000-0000-0000-000000000007"), new Guid("00000000-0000-0000-0000-000000000007"), new Guid("00000000-0000-0000-0000-000000000007"), 7, "[]", "time_7" },
                    { new Guid("00000000-0000-0000-0000-000000000008"), new Guid("00000000-0000-0000-0000-000000000008"), new Guid("00000000-0000-0000-0000-000000000008"), 8, "[]", "time_8" },
                    { new Guid("00000000-0000-0000-0000-000000000009"), new Guid("00000000-0000-0000-0000-000000000009"), new Guid("00000000-0000-0000-0000-000000000009"), 9, "[]", "time_9" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Filters_DeviceForeignKey",
                table: "Filters",
                column: "DeviceForeignKey",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Firmwares_DeviceForeignKey",
                table: "Firmwares",
                column: "DeviceForeignKey",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Frames_DeviceForeignKey",
                table: "Frames",
                column: "DeviceForeignKey");

            migrationBuilder.CreateIndex(
                name: "IX_Frames_FilterForeignKey",
                table: "Frames",
                column: "FilterForeignKey");

            migrationBuilder.CreateIndex(
                name: "IX_Sensors_DeviceForeignKey",
                table: "Sensors",
                column: "DeviceForeignKey");

            migrationBuilder.CreateIndex(
                name: "IX_Wifis_DeviceForeignKey",
                table: "Wifis",
                column: "DeviceForeignKey",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Firmwares");

            migrationBuilder.DropTable(
                name: "Frames");

            migrationBuilder.DropTable(
                name: "Sensors");

            migrationBuilder.DropTable(
                name: "Wifis");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Filters");

            migrationBuilder.DropTable(
                name: "Devices");
        }
    }
}
